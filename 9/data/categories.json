{"uid":"4b4757e66a1912dae1a509f688f20b0f","children":[{"name":"Product defects","children":[{"name":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  OK\n","children":[{"name":"CreateUser_AllFieldsFilledTest","uid":"eac3da9660c446bc","parentUid":"617f0bd0cdadab8f7a265d760007b1ad","status":"failed","time":{"start":1722333250036,"stop":1722333250090,"duration":54},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"DeleteUser_AllFieldsFilledTest","uid":"40ec9901c1803dbb","parentUid":"617f0bd0cdadab8f7a265d760007b1ad","status":"failed","time":{"start":1722333250113,"stop":1722333250127,"duration":14},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"DeleteUser_OnlyRequiredFieldsFilledTest","uid":"22eb8c6f6b14cff3","parentUid":"617f0bd0cdadab8f7a265d760007b1ad","status":"failed","time":{"start":1722333250160,"stop":1722333250170,"duration":10},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"GetZipCodesTest","uid":"6f816b4ae1e53065","parentUid":"617f0bd0cdadab8f7a265d760007b1ad","status":"failed","time":{"start":1722333250321,"stop":1722333250325,"duration":4},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"617f0bd0cdadab8f7a265d760007b1ad"},{"name":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: BadRequest\n  But was:  Created\n\n  2)   User Janna Dark was created\nAssert.That(users.Find(u => u.Name.Equals(user.Name)), Is.Null)\n  Expected: null\n  But was:  <UserDto { Age = 0, Name = Janna Dark, Sex = FEMALE, ZipCode =  }>\n\n","children":[{"name":"CreateUser_CreateDuplicateForUserTest","uid":"8565f71790b261ee","parentUid":"cb7659a8d3392a698c27101f427e7cad","status":"failed","time":{"start":1722333250094,"stop":1722333250106,"duration":12},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"cb7659a8d3392a698c27101f427e7cad"},{"name":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  BadRequest\n","children":[{"name":"CreateUser_RequiredFieldsFilledTest","uid":"93ff33535a5dc2b6","parentUid":"794fd995a32e64ae1bbfdf813c7c5eff","status":"failed","time":{"start":1722333250106,"stop":1722333250112,"duration":6},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"794fd995a32e64ae1bbfdf813c7c5eff"},{"name":"  User Bob Dilan was deleted\nAssert.That(users.Find(u => u.Name.Equals(userToDelete.Name)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n","children":[{"name":"DeleteUser_AnyOfRequiredFieldsIsMissingTest","uid":"cb6735ba60e93fda","parentUid":"9b692fe12fd98964d05d65a9b0b17b60","status":"failed","time":{"start":1722333250129,"stop":1722333250160,"duration":31},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"9b692fe12fd98964d05d65a9b0b17b60"},{"name":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: OK\n  But was:  BadRequest\n\n  2)   User Bob Milanich was not updated\nAssert.That(users.Find(u =>\n                    u.Name.Equals(userNewValues.Name) && u.Sex.Equals(userNewValues.Sex) && u.Age.Equals(userNewValues.Age)\n                    && u.ZipCode.Equals(userNewValues.ZipCode)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n\n","children":[{"name":"UpdateUser_AllFieldsFilledTest_MethodPatch","uid":"3357bd38f7ce17d3","parentUid":"090c04f4d876aa4c4fa65b9fda4c7a19","status":"failed","time":{"start":1722333250199,"stop":1722333250217,"duration":18},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"090c04f4d876aa4c4fa65b9fda4c7a19"},{"name":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: OK\n  But was:  BadRequest\n\n  2)   User Bob Dilan was not updated\nAssert.That(users.Find(u => \n                    u.Name.Equals(userNewValues.Name) && u.Sex.Equals(userNewValues.Sex) && u.Age.Equals(userNewValues.Age) \n                    && u.ZipCode.Equals(userNewValues.ZipCode)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n\n","children":[{"name":"UpdateUser_AllFieldsFilledTest_MethodPut","uid":"e5bd5f2834422649","parentUid":"130fe004434e0a78ae57db3e7538bbae","status":"failed","time":{"start":1722333250218,"stop":1722333250229,"duration":11},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"130fe004434e0a78ae57db3e7538bbae"},{"name":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: FailedDependency\n  But was:  BadRequest\n","children":[{"name":"UpdateUser_IncorrectZipCodeTest_MethodPatch","uid":"a313ccef52623ecd","parentUid":"5c26e58868b34f33e7eb9771f9bddc98","status":"failed","time":{"start":1722333250230,"stop":1722333250248,"duration":18},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"UpdateUser_IncorrectZipCodeTest_MethodPut","uid":"e5174bc2fe01e022","parentUid":"5c26e58868b34f33e7eb9771f9bddc98","status":"failed","time":{"start":1722333250249,"stop":1722333250260,"duration":11},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"5c26e58868b34f33e7eb9771f9bddc98"},{"name":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Conflict\n  But was:  BadRequest\n","children":[{"name":"UpdateUser_RequiredFieldsAreMissingTest_MethodPatch","uid":"15464df172b72f2d","parentUid":"a6980789d37e80c795ab7b7bed5dc675","status":"failed","time":{"start":1722333250261,"stop":1722333250274,"duration":13},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"UpdateUser_RequiredFieldsAreMissingTest_MethodPut","uid":"2b3486e951d570ab","parentUid":"a6980789d37e80c795ab7b7bed5dc675","status":"failed","time":{"start":1722333250275,"stop":1722333250289,"duration":14},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"a6980789d37e80c795ab7b7bed5dc675"},{"name":"  Users are not replaced with users from file\nAssert.That(newUserNames, Is.Not.EquivalentTo(userNames))\n  Expected: not equivalent to <empty>\n  But was:  <empty>\n","children":[{"name":"UploadUsers_FileContainsUsersTest","uid":"5cb98c5b19959f3a","parentUid":"b14c97ad43300f8ff38326d59f685f4b","status":"failed","time":{"start":1722333250290,"stop":1722333250301,"duration":11},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"b14c97ad43300f8ff38326d59f685f4b"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"},{"name":"Test defects","children":[{"name":"System.IO.FileNotFoundException : File not found","children":[{"name":"UploadUsers_UserHasIncorrectZipCodeTest","uid":"ff9a92069b7217f1","parentUid":"fac4a84f3d1c61750aa5202b5c26131b","status":"broken","time":{"start":1722333250302,"stop":1722333250310,"duration":8},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]},{"name":"UploadUsers_UserHasMissedRequiredFieldTest","uid":"f0a13a10a69a0734","parentUid":"fac4a84f3d1c61750aa5202b5c26131b","status":"broken","time":{"start":1722333250311,"stop":1722333250316,"duration":5},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":[]}],"uid":"fac4a84f3d1c61750aa5202b5c26131b"}],"uid":"bdbf199525818fae7a8651db9eafe741"}],"name":"categories"}