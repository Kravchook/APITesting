{"60dcc363cdd14b18a78cf99717eff75a":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"a313ccef52623ecd","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/a313ccef52623ecd","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: FailedDependency\n  But was:  BadRequest\n","time":{"start":1722333250230,"stop":1722333250248,"duration":18}}]},"3f7c3a3fa5296c992f48b63d640e542f":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"2496a5928b102a17","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/2496a5928b102a17","status":"passed","time":{"start":1722333250190,"stop":1722333250193,"duration":3}}]},"86a38a806ae7c8e9f684cc49345448b0":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"2b3486e951d570ab","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/2b3486e951d570ab","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Conflict\n  But was:  BadRequest\n","time":{"start":1722333250275,"stop":1722333250289,"duration":14}}]},"0957d6d2165d1660e37e405ee53f544c":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"5cb98c5b19959f3a","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/5cb98c5b19959f3a","status":"failed","statusDetails":"  Users are not replaced with users from file\nAssert.That(newUserNames, Is.Not.EquivalentTo(userNames))\n  Expected: not equivalent to <empty>\n  But was:  <empty>\n","time":{"start":1722333250290,"stop":1722333250301,"duration":11}}]},"61742ad80451f3f16c37a03f8efe496d":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"40ec9901c1803dbb","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/40ec9901c1803dbb","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  OK\n","time":{"start":1722333250113,"stop":1722333250127,"duration":14}}]},"771413e7030f82f0720ba65f9ca84b75":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"992c726828cfdf63","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/992c726828cfdf63","status":"passed","time":{"start":1722333250194,"stop":1722333250198,"duration":4}}]},"aff2e86ef618aff28cbb42f4a0491b75":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"3357bd38f7ce17d3","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/3357bd38f7ce17d3","status":"failed","statusDetails":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: OK\n  But was:  BadRequest\n\n  2)   User Bob Milanich was not updated\nAssert.That(users.Find(u =>\n                    u.Name.Equals(userNewValues.Name) && u.Sex.Equals(userNewValues.Sex) && u.Age.Equals(userNewValues.Age)\n                    && u.ZipCode.Equals(userNewValues.ZipCode)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n\n","time":{"start":1722333250199,"stop":1722333250217,"duration":18}}]},"2ee39e7ba1861e67d6b33909308c4f00":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"15464df172b72f2d","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/15464df172b72f2d","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Conflict\n  But was:  BadRequest\n","time":{"start":1722333250261,"stop":1722333250274,"duration":13}}]},"53e74c54416c1731341cbc067b015706":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"fc681c9c1b198ae4","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/fc681c9c1b198ae4","status":"passed","time":{"start":1722333249527,"stop":1722333250010,"duration":483}}]},"55750f80c30d354f4e766d51f72e1432":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"dcd90d1188442ff5","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/dcd90d1188442ff5","status":"passed","time":{"start":1722333250342,"stop":1722333250346,"duration":4}}]},"610881971656de2e7e75a09643f09aff":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"e5bd5f2834422649","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/e5bd5f2834422649","status":"failed","statusDetails":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: OK\n  But was:  BadRequest\n\n  2)   User Bob Dilan was not updated\nAssert.That(users.Find(u => \n                    u.Name.Equals(userNewValues.Name) && u.Sex.Equals(userNewValues.Sex) && u.Age.Equals(userNewValues.Age) \n                    && u.ZipCode.Equals(userNewValues.ZipCode)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n\n","time":{"start":1722333250218,"stop":1722333250229,"duration":11}}]},"7bfa14b6e05a2144122a11184068546e":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"ff9a92069b7217f1","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/ff9a92069b7217f1","status":"broken","statusDetails":"System.IO.FileNotFoundException : File not found","time":{"start":1722333250302,"stop":1722333250310,"duration":8}}]},"df435777da1d9c19364d69a45184fa4f":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"4a79187d90d800f1","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/4a79187d90d800f1","status":"passed","time":{"start":1722333250183,"stop":1722333250189,"duration":6}}]},"1fd063c8c2163dc71fe38350d8338229":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"65617c3fcb378bd1","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/65617c3fcb378bd1","status":"passed","time":{"start":1722333250335,"stop":1722333250342,"duration":7}}]},"3c9c7c3600aed9d2efcbb16f79416869":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"6f816b4ae1e53065","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/6f816b4ae1e53065","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  OK\n","time":{"start":1722333250321,"stop":1722333250325,"duration":4}}]},"55c61bbfd75638dc059bfba00468d1af":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"8565f71790b261ee","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/8565f71790b261ee","status":"failed","statusDetails":"Multiple failures or warnings in test:\n  1)   StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: BadRequest\n  But was:  Created\n\n  2)   User Janna Dark was created\nAssert.That(users.Find(u => u.Name.Equals(user.Name)), Is.Null)\n  Expected: null\n  But was:  <UserDto { Age = 0, Name = Janna Dark, Sex = FEMALE, ZipCode =  }>\n\n","time":{"start":1722333250094,"stop":1722333250106,"duration":12}}]},"a37a878ac9ea3448318f7a85eb135060":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"eac3da9660c446bc","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/eac3da9660c446bc","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  OK\n","time":{"start":1722333250036,"stop":1722333250090,"duration":54}}]},"7b96f38b05ea5d9e1f36b45668f0fd65":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"1983be9056a46d3c","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/1983be9056a46d3c","status":"passed","time":{"start":1722333250325,"stop":1722333250334,"duration":9}}]},"d11f4540ac05de662dc70a76dbeac49d":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"22eb8c6f6b14cff3","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/22eb8c6f6b14cff3","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  OK\n","time":{"start":1722333250160,"stop":1722333250170,"duration":10}}]},"80e310d0a751c2a5cea58348e0846c3c":{"statistic":{"failed":0,"broken":0,"skipped":0,"passed":1,"unknown":0,"total":1},"items":[{"uid":"74e8d026af5d8fae","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/74e8d026af5d8fae","status":"passed","time":{"start":1722333250171,"stop":1722333250183,"duration":12}}]},"1fb448c12897d904d80e57687130ffbc":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"e5174bc2fe01e022","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/e5174bc2fe01e022","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: FailedDependency\n  But was:  BadRequest\n","time":{"start":1722333250249,"stop":1722333250260,"duration":11}}]},"9bca98028ee063dced338d1bcc61e227":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"f0a13a10a69a0734","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/f0a13a10a69a0734","status":"broken","statusDetails":"System.IO.FileNotFoundException : File not found","time":{"start":1722333250311,"stop":1722333250316,"duration":5}}]},"8d00cea8008b36f8a56cedb51c4a4092":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"cb6735ba60e93fda","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/cb6735ba60e93fda","status":"failed","statusDetails":"  User Bob Dilan was deleted\nAssert.That(users.Find(u => u.Name.Equals(userToDelete.Name)), Is.Not.Null)\n  Expected: not null\n  But was:  null\n","time":{"start":1722333250129,"stop":1722333250160,"duration":31}}]},"bbe446c60cebf298070f02b4dfe7cab3":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":1},"items":[{"uid":"93ff33535a5dc2b6","reportUrl":"https://Kravchook.github.io/APITesting/9//#testresult/93ff33535a5dc2b6","status":"failed","statusDetails":"  StatusCode not as expected\nAssert.That(response.StatusCode, Is.EqualTo(expectedHttpStatusCode))\n  Expected: Created\n  But was:  BadRequest\n","time":{"start":1722333250106,"stop":1722333250112,"duration":6}}]}}